jobs:
  install:
    docker:
      - image: circleci/node:dubnium
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            - dependencies-{{ .Environment.CACHE_VERSION }}-
            - dependencies-
      - run:
          command: yarn global add node-gyp && yarn install
          name: yarnCmdTP
      - run:
          command: echo $CACHE_VERSION
          name: cacheVer
      - save_cache:
          paths:
            - node_modules
          key: dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
  lint:
    docker:
      - image: circleci/node:dubnium
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            - dependencies-{{ .Environment.CACHE_VERSION }}-
            - dependencies-
      - run:
          name: yarn_lint
          command: yarn lint
      - run:
          name: yarn_format
          command: yarn format:check
  unit_test:
    docker:
      - image: circleci/node:dubnium
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            - dependencies-{{ .Environment.CACHE_VERSION }}-
            - dependencies-
      - run:
          name: yarn_test_ci
          command: yarn test:ci
  set_postgre:
    working_directory: ~/repo
    docker:
      - image: circleci/node:dubnium
      - image: circleci/postgres:9.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: bdtest
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            - dependencies-{{ .Environment.CACHE_VERSION }}-
            - dependencies-
      - run:
          name: command_apt
          command: sudo apt install -y postgresql-client || true
      # - run:
      #     name: "commande de test pour la var d'env "
      #     command: echo $POSTGRES_USER
      - run:
          name: cmd_test_postgre
          command: yarn test:e2e
          environment:
            POSTGRES_USER: postgres
            POSTGRES_DB: bdtest
            JWT_SECRET: 'hello world'
            API_PORT: 3000
            API_HOST: localhost
            API_PROTOCOL: http
            DATABASE_URL: 'postgres://postgres@localhost:5432/bdtest'
  set_docker:
    docker:
      - image: bertral/cours_dev_ops_miii:latest
        auth:
          username: bertral # can specify string literal values
          password: $DOCKERHUB_PASSWORD # or project environment variable reference {{ .Environment.DOCKERHUBPASSWD }}
    steps:
      - checkout
      - run:
          name: 'do nothing just echo toto'
          command: echo toto && ls 
      - run: 
          name: "get env"
          command: env
  set_documentation:
    docker:
      - image: circleci/node:dubnium
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "package.json" }}
            - dependencies-{{ .Environment.CACHE_VERSION }}-
            - dependencies-
      - run:
          name: "yarn help"
          command: yarn help
      - run:
          name: "yarn install"
          command: yarn install
      - run:
          name: "yarn build the documentation"
          command: yarn build

workflows:
  version: 2
  install_n_build_n_test_n_postgre:
    jobs:
      - install
      - lint:
          requires:
            - install
      - unit_test:
          requires:
            - install
      - set_postgre:
          requires:
            - install
      - set_docker:
          requires:
            - install
      - set_documentation:
          requires:
            - install
version: '2'
services:
  ognion-boilerplate-postgresql:
    image: postgres:9.6.5
    environment:
      - POSTGRES_USER=tpCi
      - POSTGRES_PASSWORD=someNotSecurePassword
    ports:
      - 5432:5432
